{"version":3,"sources":["ErrorBoundaries.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["ErrorBoundary","props","state","hasError","error","errorInfo","console","log","this","children","React","Component","tf","window","model","sequential","add","layers","dense","units","inputShape","compile","loss","optimizer","xs","tensor2d","ys","fit","epochs","then","predict","print","App","useState","data","setData","useEffect","navigator","getInstalledRelatedApps","className","JSON","stringify","onClick","href","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"8OAEqBA,E,kDACnB,WAAYC,GAAa,IAAD,8BACtB,cAAMA,IACDC,MAAQ,CAAEC,UAAU,GAFH,E,8DAKNC,EAAYC,GAE5BC,QAAQC,IAAI,uBAAwBH,EAAOC,K,+BAK3C,OAAIG,KAAKN,MAAMC,SAEN,uDAGFK,KAAKP,MAAMQ,a,GAlBqBC,IAAMC,WCK3CC,G,MAAKC,OAAOD,IAGZE,EAAQF,EAAGG,aACjBD,EAAME,IAAIJ,EAAGK,OAAOC,MAAM,CAAEC,MAAO,EAAGC,WAAY,CAAC,MAEnDN,EAAMO,QAAQ,CAAEC,KAAM,mBAAoBC,UAAW,QAGrD,IAAMC,EAAKZ,EAAGa,SAAS,CAAC,EAAG,EAAG,EAAG,GAAI,CAAC,EAAG,IACnCC,EAAKd,EAAGa,SAAS,CAAC,EAAG,EAAG,EAAG,GAAI,CAAC,EAAG,IAGzCX,EAAMa,IAAIH,EAAIE,EAAI,CAAEE,OAAQ,KAAMC,MAAK,WAErCf,EAAMgB,QAAQlB,EAAGa,SAAS,CAAC,GAAI,CAAC,EAAG,KAAKM,WAmE3BC,MA9Df,WAAgB,IAAD,EACWtB,IAAMuB,SAAgB,IADjC,mBACNC,EADM,KACAC,EADA,KAcb,OAXAzB,IAAM0B,WAAU,WAEVC,UAAUC,yBAEZD,UAAUC,0BAA0BT,MAAK,SAACK,GACxC5B,QAAQC,IAAI,uCAAwC2B,GACpDC,EAAQD,QAGX,IAGD,qBAAKK,UAAU,MAAf,SACE,cAAC,EAAD,UACE,yBAAQA,UAAU,aAAlB,UAyBE,8BAAMC,KAAKC,UAAUP,KACrB,qBACEK,UAAU,WACVG,QAAS,WACPpC,QAAQC,IAAI,qBAHhB,SASE,mBAAGoC,KAAK,0FAAR,SACG,qJClEAC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBjB,MAAK,YAAkD,IAA/CkB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCHdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.dcd35a2c.chunk.js","sourcesContent":["import React from 'react';\n\nexport default class ErrorBoundary extends React.Component {\n  constructor(props: any) {\n    super(props);\n    this.state = { hasError: false };\n  }\n\n  componentDidCatch(error: any, errorInfo: any) {\n    // You can also log the error to an error reporting service\n    console.log('componentDidCatch = ', error, errorInfo);\n  }\n\n  render() {\n    //@ts-ignore\n    if (this.state.hasError) {\n      // You can render any custom fallback UI\n      return <h1>Something went wrong.</h1>;\n    }\n\n    return this.props.children;\n  }\n}\n","import React from 'react';\nimport ErrorBoundaries from './ErrorBoundaries';\n\nimport logo from './logo.svg';\nimport './App.css';\n\n//@ts-ignore\nconst tf = window.tf;\n\n// Define a model for linear regression.\nconst model = tf.sequential();\nmodel.add(tf.layers.dense({ units: 1, inputShape: [1] }));\n\nmodel.compile({ loss: 'meanSquaredError', optimizer: 'sgd' });\n\n// Generate some synthetic data for training.\nconst xs = tf.tensor2d([1, 2, 3, 4], [4, 1]);\nconst ys = tf.tensor2d([1, 3, 5, 7], [4, 1]);\n\n// Train the model using the data.\nmodel.fit(xs, ys, { epochs: 10 }).then(() => {\n  // Use the model to do inference on a data point the model hasn't seen before:\n  model.predict(tf.tensor2d([5], [1, 1])).print();\n  // Open the browser devtools to see the output\n});\n//@ts-ignore\n\nfunction App() {\n  const [data, setData] = React.useState<any[]>([]);\n\n  React.useEffect(() => {\n    //@ts-ignore\n    if (navigator.getInstalledRelatedApps) {\n      //@ts-ignore\n      navigator.getInstalledRelatedApps().then((data) => {\n        console.log('navigator.getInstalledRelatedApps = ', data);\n        setData(data);\n      });\n    }\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <ErrorBoundaries>\n        <header className=\"App-header\">\n          {/* <img src={logo} className=\"App-logo\" alt=\"logo\" /> */}\n\n          {/* <div\n          className=\"App-link\"\n          onClick={() => {\n            console.log('shareRet prep = ');\n            const data = {\n              title: 'web.dev',\n              text: 'Check out web.dev.',\n              url: 'https://web.dev/',\n            };\n\n            if (navigator.share) {\n              navigator\n                .share(data)\n                .then(() => console.log('Successful share'))\n                .catch((error) => console.log('Error sharing', error));\n            } else {\n              console.log('navigator.share not found');\n            }\n          }}\n        >\n          Share link 222\n        </div> */}\n          <div>{JSON.stringify(data)}</div>\n          <div\n            className=\"App-link\"\n            onClick={() => {\n              console.log('shareRet prep = ');\n              // window.open(\n              //   'yandexnavi://build_route_on_map?lat_from=55.74&lon_from=37.60&lat_to=55.76&lon_to=37.64',\n              // );\n            }}\n          >\n            <a href=\"yandexnavi://build_route_on_map?lat_from=55.74&lon_from=37.60&lat_to=55.76&lon_to=37.64\">\n              {'Открыть Яндекс.Навигатор'}\n            </a>\n          </div>\n        </header>\n      </ErrorBoundaries>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}